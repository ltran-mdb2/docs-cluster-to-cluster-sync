.. _c2c-reverse-process:

======================
Reverse Sync Direction
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :class: singlecol
   :depth: 1

To reverse the direction of a sync operation, use the following
procedure to :ref:`commit your sync <c2c-cutover-process>` and call the
``reverse`` endpoint. 

Before You Begin
----------------

Before you can reverse your sync direction, you must configure
``mongosync`` and use the :ref:`c2c-api-start` endpoint to set the
following parameters:

- ``reversible`` to ``true``
- ``enableUserWriteBlocking`` to ``true``.

For more information on limitations and requirements of reversing sync,
see :ref:`c2c-api-reverse`. 

Steps
-----

Use these steps to reverse the direction of your sync:

.. procedure::
   :style: normal

   .. step:: Verify the status of mongosync.

      Call the :ref:`progress <c2c-api-progress>` endpoint to determine
      the status of ``mongosync`` before starting the cutover process.
      Ensure that the ``mongosync`` process status indicates the
      following values:

      - ``canCommit`` is ``true``.

      - ``lagTimeSeconds`` is small (near ``0``).

        If ``lagTimeSeconds`` isn't close to ``0`` when the cutover
        starts, cutover might take a long time.

      The following example returns the status of the synchronization process.

      Request
      ~~~~~~~

      .. literalinclude:: /includes/api/requests/progress.sh
         :language: shell

      Response
      ~~~~~~~~

      .. literalinclude:: /includes/api/responses/progress.json
         :language: json
         :copyable: false
         :emphasize-lines: 5, 8

   .. step:: Stop any write operations to the synced collections on the source.

      - If you start ``mongosync`` with ``enableUserWriteBlocking``
        set to ``true``, ``mongosync`` blocks all write operations on
        the entire source cluster during the commit (step 4) for you.
      - If you didn't start ``mongosync`` with
        ``enableUserWriteBlocking``, ensure that you disable writes.
        For example, run the :dbcommand:`setUserWriteBlockMode` command on the
        source cluster:

        .. code-block:: javascript

           db.adminCommand( {
              setUserWriteBlockMode: 1,
              global: true 
           } )

      - If ``mongosync`` uses filtered sync, it's not necessary to
        disable writes to the entire source cluster. However, you must ensure
        that you stop write operations for the collections that the
        filter includes.

   .. step:: Send a :ref:`commit <c2c-api-commit>` request to ``mongosync``.

      If you start multiple ``mongosync`` instances for your
      migration, you must issue a commit request for each ``mongosync``
      instance.

      Request
      ~~~~~~~~

      .. literalinclude:: /includes/api/requests/commit.sh
         :language: shell

      Response
      ~~~~~~~~

      .. literalinclude:: /includes/api/responses/success.json
         :language: json
         :copyable: false

      .. note::

         After you submit a ``commit`` request, call the ``progress`` endpoint
         to ensure that the ``mongosync`` state is ``COMMITTING`` or
         ``COMMITTED``.

      Once you complete this step, ``mongosync`` blocks writes on the source cluster.

   .. step:: Wait until you can perform writes on the destination cluster.

      Call the ``progress`` endpoint to determine if ``canWrite`` is
      ``true``. If ``canWrite`` is ``false``, wait until ``progress``
      shows ``canWrite`` is ``true``.

      .. io-code-block::
         :copyable: true

         .. input::
            :language: bash

            curl -sS localhost:27182/api/v1/progress -XGET | jq ".progress.canWrite"

         .. output::
            :language: json

            true

      When you finish reversing the direction of your sync operation,
      ``mongosync`` replicates any writes that you perform on the destination 
      cluster after this step to the source cluster.

   .. step:: Verify data transfer.

      Verify the successful sync of data from the source to the
      destination cluster.

      For more information, see :ref:`c2c-verification`.

   .. step:: Enable application writes on the destination cluster.

      To enable writes, update :dbcommand:`setUserWriteBlockMode`:

      .. code-block:: javascript

         db.adminCommand(
            {
               setUserWriteBlockMode: 1,
               global: false
            }
         )

      Then, transfer your application workload to the destination cluster.

   .. step:: Call the ``progress`` endpoint to determine the status of the ``mongosync`` process.

      When the ``mongosync`` progress response indicates that the
      ``mongosync`` state is ``COMMITTED``, the cutover process is
      complete.

      .. io-code-block::
         :copyable: true

         .. input::
            :language: bash

            curl -sS localhost:27182/api/v1/progress -XGET | jq ".progress.state"

         .. output::
            :language: json

            "COMMITTED"

   .. step:: Call the ``reverse`` endpoint.
   
      Call the ``reverse`` endpoint to reverse the direction of your sync 
      operation. Your original source cluster becomes your new destination cluster 
      and your original destination cluster becomes your new source cluster. 
      
      ``mongosync`` replicates all writes that you performed on your new
      source cluster after you unblocked writes (during step 4) to the
      new destination cluster. 