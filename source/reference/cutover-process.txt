.. _c2c-cutover-process:

========================
Finalize Cutover Process
========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :class: singlecol
   :depth: 1

You can finalize a migration and transfer your application
workload from the source to the destination cluster using the
:ref:`mongosync <c2c-mongosync>` cutover process.

``mongosync`` should remain active until it reaches the
:ref:`COMMITTED <c2c-state-committed>` state. This allows ``mongosync`` to sync
any additional writes that occur during the migration.

.. note::

   Before you switch your application workload to the
   destination cluster, you should always verify a successful sync.
   For more information, see :ref:`c2c-verification`.

Steps
-----

.. procedure::
   :style: normal

   .. include:: /includes/commit-process
   
Behavior
--------

.. _c2c-canWrite-committed:

canWrite and COMMITTED
~~~~~~~~~~~~~~~~~~~~~~

``mongosync`` permits writes on the destination cluster at an
earlier stage than the ``COMMITTED`` state.

In the initial sync, ``mongosync`` replicates unique indexes on
the source cluster as non-unique indexes on the destination
cluster. During commit, the relevant non-unique indexes on the
destination cluster are set to ``prepareUnique``. When this is
done, the ``/progress`` endpoint begins to return ``canWrite:
true``. Collections with ``prepareUnique`` indexes reject
new documents that violate the unique index constraint.
``mongosync`` then converts the ``prepareUnique``
indexes into unique indexes. When this is done, ``mongosync``
changes its state to ``COMMITTED``.

.. note::

   The conversion of ``prepareUnique`` indexes to unique
   indexes can be resource intensive when syncing large
   collections. This can result in a long time between the
   ``/progress`` endpoint returning ``canWrite: true`` and
   ``mongosync`` reaching the ``COMMITTED`` state.

Learn More
----------

- :ref:`c2c-verification`
- :ref:`c2c-api-start`
- :ref:`c2c-api-commit`
- :ref:`c2c-api-progress`
- :ref:`c2c-states`

